(window.webpackJsonp=window.webpackJsonp||[]).push([[250],{619:function(t,a,v){"use strict";v.r(a);var _=v(28),s=Object(_.a)({},(function(){var t=this,a=t.$createElement,v=t._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"外观模式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#外观模式"}},[t._v("#")]),t._v(" 外观模式")]),t._v(" "),v("p",[v("code",[t._v("外观模式")]),t._v("(Facade Pattern)，称为"),v("code",[t._v("门面模式")]),t._v("。")]),t._v(" "),v("p",[t._v("外观模式属于"),v("code",[t._v("对象结构型模式")]),t._v("，是"),v("code",[t._v("迪米特法则")]),t._v("的一种具体实现。")]),t._v(" "),v("h2",{attrs:{id:"模式动机"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#模式动机"}},[t._v("#")]),t._v(" 模式动机")]),t._v(" "),v("p",[t._v("在软件开发中，有时候为了完成一项较为复杂的功能，一个客户类需要和多个业务类交互，而这些需要交互的业务类经常会作为一个整体出现，由于涉及到的类比较多，导致代码较为复杂，此时，特别需要一个类似服务员一样的角色，由它来负责和多个业务类进行交互，而客户类只需与该类交互。这就是外观模式的动机。")]),t._v(" "),v("h2",{attrs:{id:"模式定义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#模式定义"}},[t._v("#")]),t._v(" 模式定义")]),t._v(" "),v("p",[t._v("为子系统中的一组接口提供一个统一的入口。外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。")]),t._v(" "),v("h2",{attrs:{id:"模式结构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#模式结构"}},[t._v("#")]),t._v(" 模式结构")]),t._v(" "),v("p",[t._v("外观模式包含如下角色：")]),t._v(" "),v("ul",[v("li",[t._v("Facade：外观角色")]),t._v(" "),v("li",[t._v("SubSystem：子系统角色")])]),t._v(" "),v("h2",{attrs:{id:"代码实现"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),v("ul",[v("li",[v("RouterLink",{attrs:{to:"/knowledge/design/结构型模式/外观模式/PHP实现.html"}},[t._v("PHP实现")])],1),t._v(" "),v("li",[v("RouterLink",{attrs:{to:"/knowledge/design/结构型模式/外观模式/JS实现.html"}},[t._v("JS实现")])],1)]),t._v(" "),v("h2",{attrs:{id:"模式分析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#模式分析"}},[t._v("#")]),t._v(" 模式分析")]),t._v(" "),v("ul",[v("li",[t._v("根据『单一职责原则』，在软件中将一个系统划分为若干个子系统有利于降低整个系统的复杂性，一个常见的设计目标是使子系统间的通信和相互依赖关系达到最小，而达到该目标的途径之一就是引入一个外观对象，它为子系统的访问提供了一个简单而单一的入口。")]),t._v(" "),v("li",[t._v("外观模式也是『迪米特法则』的体现，通过引入一个新的外观类可以降低原有系统的复杂度，同时降低客户类与子系统类的耦合度。")]),t._v(" "),v("li",[t._v("外观模式要求一个子系统的外部与其内部的通信通过一个统一的外观对象进行，外观类将客户端与子系统的内部复杂性隔开，使得客户端只需要与外观对象打交道，而不需要与子系统内部的很多对象打交道。")]),t._v(" "),v("li",[t._v("外观模式的目的在于降低系统的复杂程度。")]),t._v(" "),v("li",[t._v("外观模式从很大程度上提高了客户端使用的便捷性，使得客户端无须关心子系统的工作细节，通过外观角色即可调用相关功能。")])]),t._v(" "),v("h2",{attrs:{id:"优点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),v("p",[t._v("外观模式的优点：")]),t._v(" "),v("ul",[v("li",[t._v("对客户屏蔽子系统组件，减少了客户处理的对象数目并使得子系统使用起来更加容易。通过引入外观模式，客户代码将变得很简单，与之关联的对象也很少。")]),t._v(" "),v("li",[t._v("实现了子系统与客户之间的松耦合关系，这使得子系统的组件变化不会影响到调用它的客户类，只需要调整外观类即可。")]),t._v(" "),v("li",[t._v("降低了大型软件系统中的编译依赖性，并简化了系统在不同平台之间的移植过程，因为编译一个子系统一般不需要编译所有其他的子系统。一个子系统的修改对其他子系统没有任何影响，而且子系统内部变化也不会影响到外观对象。")]),t._v(" "),v("li",[t._v("只是提供了一个访问子系统的统一入口，并不影响用户直接使用子系统类。")])]),t._v(" "),v("h2",{attrs:{id:"缺点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),v("p",[t._v("外观模式的缺点：")]),t._v(" "),v("ul",[v("li",[t._v("不能很好地限制客户使用子系统类，如果对客户访问子系统类做太多的限制则减少了可变性和灵活性。")]),t._v(" "),v("li",[t._v("在不引入抽象外观类的情况下，增加新的子系统可能需要修改外观类或客户端的源代码，违背了『开闭原则』。")])]),t._v(" "),v("h2",{attrs:{id:"适用环境"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#适用环境"}},[t._v("#")]),t._v(" 适用环境")]),t._v(" "),v("p",[t._v("在以下情况下可以使用外观模式：")]),t._v(" "),v("ul",[v("li",[t._v("当要为一个复杂子系统提供一个简单接口时可以使用外观模式。该接口可以满足大多数用户的需求，而且用户也可以越过外观类直接访问子系统。")]),t._v(" "),v("li",[t._v("客户程序与多个子系统之间存在很大的依赖性。引入外观类将子系统与客户以及其他子系统解耦，可以提高子系统的独立性和可移植性。")]),t._v(" "),v("li",[t._v("在层次化结构中，可以使用外观模式定义系统中每一层的入口，层与层之间不直接产生联系，而通过外观类建立联系，降低层之间的耦合度。")])]),t._v(" "),v("h2",{attrs:{id:"模式扩展"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#模式扩展"}},[t._v("#")]),t._v(" 模式扩展")]),t._v(" "),v("h3",{attrs:{id:"一个系统有多个外观类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一个系统有多个外观类"}},[t._v("#")]),t._v(" 一个系统有多个外观类")]),t._v(" "),v("p",[t._v("在外观模式中，通常只需要一个外观类，并且此外观类只有一个实例，换言之它是一个单例类。在很多情况下为了节约系统资源，一般将外观类设计为单例类。当然这并不意味着在整个系统里只能有一个外观类，在一个系统中可以设计多个外观类，每个外观类都负责和一些特定的子系统交互，向用户提供相应的业务功能。")]),t._v(" "),v("h3",{attrs:{id:"不要试图通过外观类为子系统增加新行为"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#不要试图通过外观类为子系统增加新行为"}},[t._v("#")]),t._v(" 不要试图通过外观类为子系统增加新行为")]),t._v(" "),v("p",[t._v("不要通过继承一个外观类在子系统中加入新的行为，这种做法是错误的。外观模式的用意是为子系统提供一个集中化和简化的沟通渠道，而不是向子系统加入新的行为，新的行为的增加应该通过修改原有子系统类或增加新的子系统类来实现，不能通过外观类来实现。")]),t._v(" "),v("h3",{attrs:{id:"外观模式与迪米特法则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#外观模式与迪米特法则"}},[t._v("#")]),t._v(" 外观模式与迪米特法则")]),t._v(" "),v("p",[t._v("外观模式创造出一个外观对象，将客户端所涉及的属于一个子系统的协作伙伴的数量减到最少，使得客户端与子系统内部的对象的相互作用被外观对象所取代。外观类充当了客户类与子系统类之间的『第三者』，降低了客户类与子系统类之间的耦合度，外观模式就是实现代码重构以便达到『迪米特法则』要求的一个强有力武器。")]),t._v(" "),v("h3",{attrs:{id:"抽象外观类的引入"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#抽象外观类的引入"}},[t._v("#")]),t._v(" 抽象外观类的引入")]),t._v(" "),v("p",[t._v("外观模式最大的缺点在于违背了『开闭原则』，当增加新的子系统或者移除子系统时需要修改外观类，可以通过引入抽象外观类在一定程度上解决该问题，客户端针对抽象外观类进行编程。对于新的业务需求，不修改原有外观类，而对应增加一个新的具体外观类，由新的具体外观类来关联新的子系统对象，同时通过修改配置文件来达到不修改源代码并更换外观类的目的。")])])}),[],!1,null,null,null);a.default=s.exports}}]);