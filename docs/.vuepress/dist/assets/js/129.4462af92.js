(window.webpackJsonp=window.webpackJsonp||[]).push([[129],{487:function(t,v,_){"use strict";_.r(v);var a=_(27),r=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"职责链模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#职责链模式"}},[t._v("#")]),t._v(" 职责链模式")]),t._v(" "),_("p",[_("code",[t._v("职责链模式")]),t._v("(Chain of Responsibility Pattern)，又称为责任链模式。")]),t._v(" "),_("p",[t._v("职责链模式属于"),_("code",[t._v("对象行为型模式")]),t._v("。")]),t._v(" "),_("h2",{attrs:{id:"模式动机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模式动机"}},[t._v("#")]),t._v(" 模式动机")]),t._v(" "),_("p",[t._v("在很多情况下，在一个软件系统中可以处理某个请求的对象不止一个。例如审批工作流等，他们可以构成一条处理采购单的链式结构，采购单(可以看作是要处理的信息)沿着这条链进行传递，这条链就称为责任链。职责链可以是一条直线、一个环或者一个树形结构，最常见的职责链是直线型，即沿着一条单向的链来传递请求。链上的每一个对象都是请求处理者，职责链模式可以将请求的处理者组织成一条链，并让请求沿着链传递，由链上的处理者对请求进行相应的处理。")]),t._v(" "),_("p",[t._v("在此过程中，客户端实际上无须关心请求的处理细节以及请求的传递，只需将请求发送到链上即可，从而实现请求发送者和请求处理者解耦。")]),t._v(" "),_("h2",{attrs:{id:"模式定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模式定义"}},[t._v("#")]),t._v(" 模式定义")]),t._v(" "),_("p",[t._v("避免请求发送者和接受者耦合在一起，让多个对象都有可能接受请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。")]),t._v(" "),_("h2",{attrs:{id:"模式结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模式结构"}},[t._v("#")]),t._v(" 模式结构")]),t._v(" "),_("p",[t._v("职责链模式包含如下角色：")]),t._v(" "),_("ul",[_("li",[t._v("Handler：抽象处理者")]),t._v(" "),_("li",[t._v("ConcreteHandler：具体处理者")])]),t._v(" "),_("h2",{attrs:{id:"代码实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),_("ul",[_("li",[_("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/职责链模式/PHP实现.html"}},[t._v("PHP实现")])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/职责链模式/JS实现.html"}},[t._v("JS实现")])],1)]),t._v(" "),_("h2",{attrs:{id:"模式扩展"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模式扩展"}},[t._v("#")]),t._v(" 模式扩展")]),t._v(" "),_("p",[t._v("职责链模式可分为两种：")]),t._v(" "),_("ul",[_("li",[t._v("纯的职责链模式")]),t._v(" "),_("li",[t._v("不纯的职责链模式")])]),t._v(" "),_("h3",{attrs:{id:"纯的职责链模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#纯的职责链模式"}},[t._v("#")]),t._v(" 纯的职责链模式")]),t._v(" "),_("p",[t._v("一个纯的职责链模式要求一个具体处理者对象只能在两个行为中选择一个："),_("strong",[t._v("要么承担全部职责，要么将职责推给下家")]),t._v("，不允许出现某一个具体处理者对象在承担了一部分或全部职责后，又将职责向下传递的情况。而且在纯的职责链模式中，"),_("strong",[t._v("要求一个请求必须被某一个处理者对象所接受")]),t._v("，不能出现某个请求未被任何一个处理者对象处理的情况。在前面的采购单审批实例中应用的是纯的职责链模式。")]),t._v(" "),_("h3",{attrs:{id:"不纯的职责链模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#不纯的职责链模式"}},[t._v("#")]),t._v(" 不纯的职责链模式")]),t._v(" "),_("p",[t._v("在一个不纯的职责链模式中"),_("strong",[t._v("允许某个请求被一个具体处理者部分处理后再向下传递，或者一个具体处理者处理完某请求后其后继处理者可以继续处理该请求，而且一个请求可以最终不被任何处理者对象所接收")]),t._v("。每一级具体处理者在接收到事件时，都可以处理此事件，而不论此事件是否在上一级已得到处理，还存在事件未被处理的情况。")]),t._v(" "),_("h2",{attrs:{id:"模式分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模式分析"}},[t._v("#")]),t._v(" 模式分析")]),t._v(" "),_("h3",{attrs:{id:"使用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#使用场景"}},[t._v("#")]),t._v(" 使用场景")]),t._v(" "),_("p",[t._v("职责链模式通过建立一条链来组织请求的处理者，请求将沿着链进行传递，请求发送者无须知道请求在何时、何处以及如何被处理，实现了请求发送者与处理者的解耦。在软件开发中，如果遇到有多个对象可以处理同一请求时可以应用职责链模式，例如在Web应用开发中创建一个过滤器(Filter)链来对请求数据进行过滤，在工作流系统中实现公文的分级审批等等，使用职责链模式可以较好地解决此类问题。")]),t._v(" "),_("h2",{attrs:{id:"优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),_("p",[t._v("职责链的优点：")]),t._v(" "),_("ul",[_("li",[t._v("职责链模式使得一个对象无须知道是其他哪一个对象处理其请求，对象仅需知道该请求会被处理即可，接收者和发送者都没有对方的明确信息，且链中的对象不需要知道链的结构，由客户端负责链的创建，降低了系统的耦合度。")]),t._v(" "),_("li",[t._v("请求处理对象仅需维持一个指向其后继者的引用，而不需要维持它对所有的候选处理者的引用，可简化对象的相互连接。")]),t._v(" "),_("li",[t._v("在给对象分派职责时，职责链可以给我们更多的灵活性，可以通过在运行时对该链进行动态的增加或修改来增加或改变处理一个请求的职责。")]),t._v(" "),_("li",[t._v("在系统中增加一个新的具体请求处理者时无须修改原有系统的代码，只需要在客户端重新建链即可，从这一点来看是符合『开闭原则』的。")])]),t._v(" "),_("h2",{attrs:{id:"缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),_("p",[t._v("职责链的缺点：")]),t._v(" "),_("ul",[_("li",[t._v("由于一个请求没有明确的接收者，那么就不能保证它一定会被处理，该请求可能一直到链的末端都得不到处理；一个请求也可能因职责链没有被正确配置而得不到处理。")]),t._v(" "),_("li",[t._v("对于比较长的职责链，请求的处理可能涉及到多个处理对象，系统性能将受到一定影响，而且在进行代码调试时不太方便。")]),t._v(" "),_("li",[t._v("如果建链不当，可能会造成循环调用，将导致系统陷入死循环。")])]),t._v(" "),_("h2",{attrs:{id:"适用环境"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#适用环境"}},[t._v("#")]),t._v(" 适用环境")]),t._v(" "),_("p",[t._v("在以下情况下可以考虑使用职责链模式：")]),t._v(" "),_("ul",[_("li",[t._v("有多个对象可以处理同一个请求，具体哪个对象处理该请求待运行时刻再确定，客户端只需将请求提交到链上，而无须关心请求的处理对象是谁以及它是如何处理的。")]),t._v(" "),_("li",[t._v("在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。")]),t._v(" "),_("li",[t._v("可动态指定一组对象处理请求，客户端可以动态创建职责链来处理请求，还可以改变链中处理者之间的先后次序。")])])])}),[],!1,null,null,null);v.default=r.exports}}]);