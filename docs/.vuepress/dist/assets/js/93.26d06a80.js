(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{461:function(t,a,s){"use strict";s.r(a);var e=s(28),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"简单工厂模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单工厂模式"}},[t._v("#")]),t._v(" 简单工厂模式")]),t._v(" "),s("p",[s("code",[t._v("简单工厂模式")]),t._v("(Simple Factory Pattern)又叫"),s("code",[t._v("静态方法模式")]),t._v("(Static Factory Method)。")]),t._v(" "),s("p",[t._v("简单工厂模式属于"),s("code",[t._v("对象创建型模式")]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"模式动机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模式动机"}},[t._v("#")]),t._v(" 模式动机")]),t._v(" "),s("p",[t._v("考虑一个简单的软件应用场景，一个软件系统可以提供多个外观不同的按钮（如圆形按钮、矩形按钮、菱形按钮等），这些按钮都源自同一个基类，不过在继承基类后不同的子类修改了部分属性从而使得它们可以呈现不同的外观，如果我们希望在使用这些按钮时，不需要知道这些具体按钮类的名字，只需要知道表示该按钮类的一个参数，并提供一个调用方便的方法，把该参数传入方法即可返回一个相应的按钮对象，此时，就可以使用简单工厂模式。")]),t._v(" "),s("h2",{attrs:{id:"模式定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模式定义"}},[t._v("#")]),t._v(" 模式定义")]),t._v(" "),s("p",[t._v("在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。")]),t._v(" "),s("h2",{attrs:{id:"模式结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模式结构"}},[t._v("#")]),t._v(" 模式结构")]),t._v(" "),s("p",[t._v("简单工厂模式包含如下角色：")]),t._v(" "),s("ul",[s("li",[t._v("Factory：工厂角色 —— 负责实现创建所有实例的内部逻辑。")]),t._v(" "),s("li",[t._v("Product：抽象产品角色 —— 创建所有对象的父类，负责描述所有实例所共有的公共接口。")]),t._v(" "),s("li",[t._v("ConcreteProduct：具体产品角色 —— 创建目标，所有的创建的对象都充当这个角色的某个具体类的实例。")])]),t._v(" "),s("h2",{attrs:{id:"代码实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/knowledge/design/创建型模式/简单工厂模式/PHP实现.html"}},[t._v("PHP实现")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/knowledge/design/创建型模式/简单工厂模式/JS实现.html"}},[t._v("JS实现")])],1)]),t._v(" "),s("h2",{attrs:{id:"模式分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模式分析"}},[t._v("#")]),t._v(" 模式分析")]),t._v(" "),s("ul",[s("li",[t._v("将对象的创建和对象本身业务处理分离可以降低系统的耦合度，使得两者修改起来都相对容易。")]),t._v(" "),s("li",[t._v("在调用工厂类的工厂方法时，由于工厂方法是静态方法，使用起来很方便，可通过类名直接调用，而且只需传入一个简单的参数即可，在实际开发中，还可以在调用时将所传入的参数保存在XML等格式中的配置文件中，修改参数时无须修改任何源代码。")]),t._v(" "),s("li",[t._v("简单工厂模式最大的问题在于工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，这一点与开闭原则是相违背的。")]),t._v(" "),s("li",[t._v("简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节。")])]),t._v(" "),s("h2",{attrs:{id:"优点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),s("p",[t._v("简单工厂模式的优点：")]),t._v(" "),s("ul",[s("li",[t._v("工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅『消费』产品；简单工厂模式通过这种做法实现了对责任的分割，它提供了专门的工厂类用于创建对象。")]),t._v(" "),s("li",[t._v("客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量。")]),t._v(" "),s("li",[t._v("通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的的灵活性。")])]),t._v(" "),s("h2",{attrs:{id:"缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),s("p",[t._v("简单工厂模式的缺点：")]),t._v(" "),s("ul",[s("li",[t._v("由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响。")]),t._v(" "),s("li",[t._v("使用简单工厂模式将会增加系统中类的个数，在一定程度上增加了系统的复杂度和理解难度。")]),t._v(" "),s("li",[t._v("系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护。")]),t._v(" "),s("li",[t._v("简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构。")])]),t._v(" "),s("h2",{attrs:{id:"适用环境"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#适用环境"}},[t._v("#")]),t._v(" 适用环境")]),t._v(" "),s("p",[t._v("在以下情况下可以使用简单工厂模式：")]),t._v(" "),s("ul",[s("li",[t._v("工厂类负责创建的对象比较少：由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂。")]),t._v(" "),s("li",[t._v("客户端只知道传入的工厂类的参数，对于如何创建对象不关心：客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数。")])]),t._v(" "),s("h2",{attrs:{id:"模式应用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模式应用"}},[t._v("#")]),t._v(" 模式应用")]),t._v(" "),s("ul",[s("li",[t._v("JDK类库中广泛使用了简单工厂模式，如工具类java.text.DateFormat，它用于格式化一个本地日期或者时间。")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateFormat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDateInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateFormat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDateInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateFormat")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDateInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" style"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Locale")]),t._v(" locale"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("Java加密技术")])]),t._v(" "),s("p",[t._v("获取不同加密算法的密匙生成器。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("KeyGenerator")]),t._v(" keyGen "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("KeyGenerator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DESede"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("创建密码器：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cipher")]),t._v(" cp "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cipher")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"DESede"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);