(window.webpackJsonp=window.webpackJsonp||[]).push([[221],{582:function(t,s,a){"use strict";a.r(s);var n=a(27),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"入门与进阶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#入门与进阶"}},[t._v("#")]),t._v(" 入门与进阶")]),t._v(" "),a("p",[t._v("概览，讲述编程所需的学习与实践。")]),t._v(" "),a("h2",{attrs:{id:"代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),a("p",[t._v("一个程序，经常被称为"),a("code",[t._v("源代码")]),t._v("或者只是"),a("code",[t._v("代码")]),t._v("，是一组告诉计算机要执行什么任务的特殊指令。")]),t._v(" "),a("p",[t._v("合法的格式与指令的组合规则被称为一种"),a("code",[t._v("计算机语言")]),t._v("，有时被称作为它的"),a("code",[t._v("语法")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"执行一个程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行一个程序"}},[t._v("#")]),t._v(" 执行一个程序")]),t._v(" "),a("p",[t._v("程序需要被"),a("code",[t._v("执行")]),t._v("，也称为"),a("code",[t._v("运行这个程序")]),t._v("。")]),t._v(" "),a("p",[t._v("开发者编写的代码，并不能直接被计算机理解。因此需要通过特殊工具（解释器或编译器）将代码翻译为计算机可以理解的命令。")]),t._v(" "),a("p",[t._v("对于某些计算机语言，这种命令的翻译是每次"),a("strong",[t._v("程序运行时")]),t._v("从上向下，一行接一行完成的，称之为"),a("code",[t._v("解释")]),t._v("。")]),t._v(" "),a("p",[t._v("对于另一些语言，这种翻译是提前完成的，称之为"),a("code",[t._v("编译")]),t._v("，当程序之后运行时，就可以直接运行已经翻译好，随时可以运行的计算机指令了。")]),t._v(" "),a("p",[t._v("JavaScript通常被断言为"),a("code",[t._v("解释型")]),t._v("的语言，因为JavaScript源代码在它每次运行时才处理。但这并不是完全准确的，JavaScript引擎实际上在运行前一刻"),a("code",[t._v("编译")]),t._v("它，然后立即运行编译好的代码。")]),t._v(" "),a("h2",{attrs:{id:"内建类型的方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内建类型的方法"}},[t._v("#")]),t._v(" 内建类型的方法")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.14159")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 11")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "HELLO WORLD"')]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toFixed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "3.1416"')]),t._v("\n")])])]),a("p",[a("code",[t._v("a")]),t._v("和"),a("code",[t._v("b")]),t._v('为"原生类型"，却可以调用方法是怎么回事？')]),t._v(" "),a("p",[t._v("简而言之，是因为对象包装器的作用。当我们想把"),a("code",[t._v("基本类型值")]),t._v("作为一个"),a("code",[t._v("object")]),t._v("来使用时，JS自动将这个值『封箱』为它对应的对象保证器（开发者不可见）。相关的属性和方法在包装器上，因此这些原生类型就可以调用方法了。")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("string")]),t._v(" -> "),a("code",[t._v("String")]),t._v("包装器")]),t._v(" "),a("li",[a("code",[t._v("number")]),t._v(" -> "),a("code",[t._v("Number")]),t._v("包装器")]),t._v(" "),a("li",[a("code",[t._v("boolean")]),t._v(" -> "),a("code",[t._v("Boolean")]),t._v("包装器")])]),t._v(" "),a("h2",{attrs:{id:"旧的与新的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#旧的与新的"}},[t._v("#")]),t._v(" 旧的与新的")]),t._v(" "),a("p",[t._v("新的JS特性，不一定能在老版本的浏览器中使用。将新特性带到老版本中，可以通过两种技术实现：『填补』和『转译』。")]),t._v(" "),a("h3",{attrs:{id:"填补"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#填补"}},[t._v("#")]),t._v(" 填补")]),t._v(" "),a("p",[t._v("填补(Polyfilling)是一个人为发明的词。指拿新特性的定义并制造一段行为等价的代码，但是这段代码可以运行在老版本的JS环境中。")]),t._v(" "),a("p",[t._v("例如：ES6定义了一个"),a("code",[t._v("Number.isNaN")]),t._v("工具，我们通过相同的代码来实现此功能，使它能在低于ES6浏览器中使用。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果当前浏览器不支持此方法，才使用填补功能")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isNaN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("isNaN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("并不是所有的新特性都可以完全填补，一个特性的行为也不一定能够完全填补，可能会存在细微的偏差。因此在实现填补时应当非常小心，来确保尽可能严格地遵循语言规范。")]),t._v(" "),a("p",[t._v("或者使用更靠谱的填补，"),a("a",{attrs:{href:"https://github.com/es-shims/es5-shim",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES5-Shim"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://github.com/es-shims/es6-shim",target:"_blank",rel:"noopener noreferrer"}},[t._v("ES6-Shim"),a("OutboundLink")],1),t._v("等。")]),t._v(" "),a("h3",{attrs:{id:"转译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转译"}},[t._v("#")]),t._v(" 转译")]),t._v(" "),a("p",[t._v("功能可以填补，但是语言中新增的语法是没有任何办法填补的。在老版本的JS引擎中，使用新的语法就会因为"),a("code",[t._v("不可识别/不合法")]),t._v("而抛出错误。")]),t._v(" "),a("p",[t._v("所以更好的选择是使用一个工具将新版本的代码转换为等价的老版本的代码。这个处理通常被称为『转译(transpiling)』，表示"),a("code",[t._v("转换")]),t._v(" + "),a("code",[t._v("编译")]),t._v("。")]),t._v(" "),a("p",[t._v("实际上，你的源代码是使用新的语法形式编写的，但是你向浏览器部署的是转译过的旧语法形式，一般转译器会插入到构建过程中。")]),t._v(" "),a("p",[t._v("为什么使用新语法后，却又将它转译为老版本代码，为什么不直接编写老版本代码呢？原因如下：")]),t._v(" "),a("p",[t._v("新语法是为了使代码更具可读性和维护性而设计的，老版本的等价物经常会绕很多圈子，因此应该首选更新更干净的语法，不仅为自己，也为了开发团队的其他成员。")]),t._v(" "),a("p",[t._v("举一个转译的简单例子，ES6新增了一个『默认参数值』的特性，看起来如下：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 42")]),t._v("\n")])])]),a("p",[t._v("很简单，也很有用吧？但这种新语法在ES6之前的引擎中是不合法的。那么转译器将会对这段代码做什么才能让它在老版本环境中运行呢？")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" argument"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("对比下来，新语法更具可读性和维护性，目前比较通用的转译器"),a("a",{attrs:{href:"https://babeljs.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Babel"),a("OutboundLink")],1),t._v("、"),a("a",{attrs:{href:"https://github.com/google/traceur-compiler",target:"_blank",rel:"noopener noreferrer"}},[t._v("Traceur"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"非javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非javascript"}},[t._v("#")]),t._v(" 非JavaScript")]),t._v(" "),a("p",[t._v("现在大多数JS程序都是在浏览器这样的环境运行的，你所编写的很大一部分代码，严格来说，不是直接由JavaScript控制的。")]),t._v(" "),a("p",[t._v("例如最常见的DOM API：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" el "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"foo"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("code",[t._v("document")]),t._v("并不是JS引擎提供的，也不受JavaScript语言规范所控制。它采用了某种与普通JS对象极其相似的形式，但不是真正的对象，通常称为"),a("code",[t._v("宿主对象")]),t._v("。")]),t._v(" "),a("p",[t._v("另外，"),a("code",[t._v("document")]),t._v("的"),a("code",[t._v("getElementById")]),t._v("方法看起来像一个普通的JS函数，但它只是一个微微暴露出来的接口，指向由浏览器DOM提供的内建方法。在一些（现代）浏览器中，这一层可能也是由JS实现的，但是传统的DOM及其行为是由"),a("code",[t._v("C/C++")]),t._v("这样的语言实现的。")])])}),[],!1,null,null,null);s.default=e.exports}}]);