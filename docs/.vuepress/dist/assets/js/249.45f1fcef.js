(window.webpackJsonp=window.webpackJsonp||[]).push([[249],{265:function(e,s,t){"use strict";t.r(s);var o=t(2),a=Object(o.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"《node-js-来一打c-扩展》"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#《node-js-来一打c-扩展》"}},[e._v("#")]),e._v(" 《Node.js 来一打C++扩展》")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://img3.doubanio.com/view/subject/l/public/s29801512.jpg",alt:""}}),t("br"),e._v("\n作者: "),t("a",{attrs:{href:"https://www.zhihu.com/people/xadillax/activities",target:"_blank",rel:"noopener noreferrer"}},[e._v("死月絲卡蕾特"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"commonjs模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commonjs模块"}},[e._v("#")]),e._v(" CommonJS模块")]),e._v(" "),t("p",[e._v("Node.js中的模块定义规范参照CommonJS。")]),e._v(" "),t("h3",{attrs:{id:"require"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#require"}},[e._v("#")]),e._v(" require")]),e._v(" "),t("p",[t("code",[e._v("require")]),e._v("是一个函数，这个函数有一个参数代表"),t("code",[e._v("模块标识")]),e._v("，它的返回值就是其所引用的外部模块所暴露的API。")]),e._v(" "),t("h3",{attrs:{id:"模块上下文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块上下文"}},[e._v("#")]),e._v(" 模块上下文")]),e._v(" "),t("p",[e._v("在一个CommonJS模块的上下文中，需要满足以下条件的一些事物存在。")]),e._v(" "),t("ol",[t("li",[t("p",[t("code",[e._v("require")]),e._v("函数")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("exports")])])]),e._v(" "),t("li",[t("p",[e._v("一个名为"),t("code",[e._v("module")]),e._v("的对象，里面包含了这个模块的一些自带属性")])])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("提示")]),e._v(" "),t("p",[e._v("在Node.js中，"),t("code",[e._v("module")]),e._v("对象里面还有一个exports对象"),t("br"),e._v("\n其初始指针指向与"),t("code",[e._v("exports")]),e._v("相同，而模块真正暴露出去的是"),t("code",[e._v("module")]),e._v("中的"),t("code",[e._v("exports")]),t("br"),e._v("\n如果替换了"),t("code",[e._v("module.export")]),e._v("对象，那么导出的就是被替换的对象，而不是"),t("code",[e._v("exports")]),e._v("了")])]),e._v(" "),t("h3",{attrs:{id:"模块标识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块标识"}},[e._v("#")]),e._v(" 模块标识")]),e._v(" "),t("p",[e._v("模块标识就是一个字符串，用于传给"),t("code",[e._v("require")]),e._v("函数。"),t("br"),e._v('\n它需要小驼峰格式命名，或者以"."以及".."带头的相对路径，从理论上来说不应该带上文件后缀，如".js"。')]),e._v(" "),t("h3",{attrs:{id:"node-js寻址算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-js寻址算法"}},[e._v("#")]),e._v(" Node.js寻址算法")]),e._v(" "),t("ol",[t("li",[t("p",[t("strong",[e._v("核心模块")]),e._v("，指代码存在于Node.js源码库，这些模块都有自己的预留标识，当执行"),t("code",[e._v("require")]),e._v('函数时传入的标识与某个Node.js核心模块吻合时，该函数返回的是核心模块的API。如"fs"、"net"等。更多核心模块参考'),t("a",{attrs:{href:"https://nodejs.org/en/docs/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Node.js官方文档"),t("OutboundLink")],1),e._v("。")])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("文件模块")]),e._v("，指需要Node.js进行文件寻址获得的模块。"),t("br"),e._v('\n如果模块的路径为一个目录，那么会依次寻找该目录下的"index.js"、"index.json"以及"index.node"文件。若存在上述任何一个字段，则立刻返回。'),t("br"),e._v("\n如果模块是一个第三方模块目录，其目录下存在一个合法的"),t("code",[e._v("package.json")]),e._v("文件的话，就会在上述步骤前，先解析"),t("code",[e._v("package.json")]),e._v("中的"),t("code",[e._v("main")]),e._v("字段。如果字段存在且合法，就会直接加载该字段所指向的文件。")])])]),e._v(" "),t("div",{staticClass:"language-json extra-class"},[t("pre",{pre:!0,attrs:{class:"language-json"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// package.json")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    ..."),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n    "),t("span",{pre:!0,attrs:{class:"token property"}},[e._v('"main"')]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"app.js"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// 会加载目录下的app.js 而不是index.js")]),e._v("\n    ...\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[t("p",[t("strong",[e._v("第三方模块")]),e._v('，除上述的核心模块外，其他不是以"/"、"./"或者"../"开头的'),t("strong",[e._v("字符串")]),e._v("作为标识的模块都被称为第三方模块，这些模块通常以Node.js依赖包的形式存在。它的加载流程如下:")]),e._v(" "),t("ol",[t("li",[e._v("当前文件目录的node_modules目录下")]),e._v(" "),t("li",[e._v("若①没有符合的模块，则去当前文件的父目录的node_modules下")]),e._v(" "),t("li",[e._v("若还没有符合的模块，则再往上一层目录的mode_modules下")]),e._v(" "),t("li",[e._v("重复③，直到寻找到符合的模块或者到根目录为止")])])]),e._v(" "),t("li",[t("p",[t("strong",[e._v("项目模块")]),e._v('，在项目中通过"/"、"./"或者"../"带头的模块就是项目模块。载入模块时我们并不需要加后缀名，这也是CommonJS中所规定的，因此Node.js加载项目模块或第三方模块时会枚举尝试后缀名。依次为".js"、".json"和".node"，其中".node"就是C++模块。')])])]),e._v(" "),t("h3",{attrs:{id:"node-js模块缓存机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-js模块缓存机制"}},[e._v("#")]),e._v(" Node.js模块缓存机制")]),e._v(" "),t("p",[e._v("实际上在Node.js运行中，通常情况下一个包一旦被加载了，那么执行第二次的时候就会在缓存中获取暴露的API，而不会重新加载一遍该模块里面的代码再次返回。")]),e._v(" "),t("h2",{attrs:{id:"node-js的包机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node-js的包机制"}},[e._v("#")]),e._v(" Node.js的包机制")])])}),[],!1,null,null,null);s.default=a.exports}}]);