(window.webpackJsonp=window.webpackJsonp||[]).push([[80],{441:function(t,v,_){"use strict";_.r(v);var d=_(27),r=Object(d.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"设计模式梳理总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计模式梳理总结"}},[t._v("#")]),t._v(" 设计模式梳理总结")]),t._v(" "),_("h2",{attrs:{id:"创建型模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[t._v("#")]),t._v(" 创建型模式")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("模式")]),t._v(" "),_("th",[t._v("功能")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("抽象工厂")]),t._v(" "),_("td",[t._v("提供一个创建一系列或相关依赖对象的接口，而无需指定它们具体的类。")])]),t._v(" "),_("tr",[_("td",[t._v("建造者")]),t._v(" "),_("td",[t._v("将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。")])]),t._v(" "),_("tr",[_("td",[t._v("工厂方法")]),t._v(" "),_("td",[t._v("定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂模式使得一个类的实例化延迟到子类。")])]),t._v(" "),_("tr",[_("td",[t._v("原型")]),t._v(" "),_("td",[t._v("用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。")])]),t._v(" "),_("tr",[_("td",[t._v("单例")]),t._v(" "),_("td",[t._v("保证一个类仅有一个实例，并提供一个访问它的全局访问点。")])]),t._v(" "),_("tr",[_("td",[t._v("简单工厂")]),t._v(" "),_("td",[t._v("创建同一类对象时，提供一个接口，根据参入参数的不同来返回不同的实例。")])])])]),t._v(" "),_("h2",{attrs:{id:"结构型模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[t._v("#")]),t._v(" 结构型模式")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("模式")]),t._v(" "),_("th",[t._v("功能")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("适配器")]),t._v(" "),_("td",[t._v("将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。")])]),t._v(" "),_("tr",[_("td",[t._v("桥接")]),t._v(" "),_("td",[t._v("将抽象部分与它的实现部分分离，使它们都可以独立的变化。")])]),t._v(" "),_("tr",[_("td",[t._v("组合")]),t._v(" "),_("td",[t._v("将对象组合成树形结构以表示'部分—整体'的层次，组合模式使得用户对单个对象和组合对象的使用具有一致性。")])]),t._v(" "),_("tr",[_("td",[t._v("装饰者")]),t._v(" "),_("td",[t._v("动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更加灵活。")])]),t._v(" "),_("tr",[_("td",[t._v("外观")]),t._v(" "),_("td",[t._v("为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。")])]),t._v(" "),_("tr",[_("td",[t._v("享元")]),t._v(" "),_("td",[t._v("为运用共享技术有效地支持大量颗粒度的对象。")])]),t._v(" "),_("tr",[_("td",[t._v("代理")]),t._v(" "),_("td",[t._v("为其它对象提供一种代理以控制这个对象的访问。")])])])]),t._v(" "),_("h2",{attrs:{id:"行为型模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式"}},[t._v("#")]),t._v(" 行为型模式")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("模式")]),t._v(" "),_("th",[t._v("功能")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("观察者")]),t._v(" "),_("td",[t._v("定义对象间的一对多关系依赖，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。")])]),t._v(" "),_("tr",[_("td",[t._v("模板")]),t._v(" "),_("td",[t._v("定义一个操作的算法骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。")])]),t._v(" "),_("tr",[_("td",[t._v("命令")]),t._v(" "),_("td",[t._v("将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；可以对请求排队或记录请求日志，以及支持可撤销的操作。")])]),t._v(" "),_("tr",[_("td",[t._v("状态")]),t._v(" "),_("td",[t._v("允许一个对象在其内部状态改变时改变它的行为，让对象看起来似乎修改了它的类。")])]),t._v(" "),_("tr",[_("td",[t._v("职责链")]),t._v(" "),_("td",[t._v("使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。")])]),t._v(" "),_("tr",[_("td",[t._v("解释器")]),t._v(" "),_("td",[t._v("给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。")])]),t._v(" "),_("tr",[_("td",[t._v("中介者")]),t._v(" "),_("td",[t._v("用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示的相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。")])]),t._v(" "),_("tr",[_("td",[t._v("访问者")]),t._v(" "),_("td",[t._v("表示一个作用域某对象结构中的各元素的操作，它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。")])]),t._v(" "),_("tr",[_("td",[t._v("策略")]),t._v(" "),_("td",[t._v("定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。")])]),t._v(" "),_("tr",[_("td",[t._v("备忘录")]),t._v(" "),_("td",[t._v("在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原本保存的状态。")])]),t._v(" "),_("tr",[_("td",[t._v("迭代器")]),t._v(" "),_("td",[t._v("提供一种方法来顺序访问一个聚合对象中各个元素，而不需暴露该对象的内部表示。")])])])])])}),[],!1,null,null,null);v.default=r.exports}}]);