(window.webpackJsonp=window.webpackJsonp||[]).push([[219],{588:function(t,e,r){"use strict";r.r(e);var a=r(28),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),r("p",[t._v("设计模式学习总结整理。")]),t._v(" "),r("p",[t._v("设计模式("),r("code",[t._v("Design pattern")]),t._v(")代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。")]),t._v(" "),r("p",[t._v("设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。毫无疑问，设计模式于己于他于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。")]),t._v(" "),r("h2",{attrs:{id:"设计模式的由来"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的由来"}},[t._v("#")]),t._v(" 设计模式的由来")]),t._v(" "),r("p",[t._v("在1994年，由Erich Gamma、Richard Helm、Ralph Johnson和John Vlissides四人合著出版了一本名为Design Patterns - Elements of Reusable Object - Oriented Software（中文译名：设计模式-可复用的面向对象软件元素）的书，该书首次提到了软件开发中设计模式的概念。")]),t._v(" "),r("p",[t._v("四位作者合称GOF（四人帮，全称Gang of Four）。他们所提出的设计模式主要是基于以下的面向对象设计原则：")]),t._v(" "),r("ul",[r("li",[t._v("对接口编程而不是对实现编程。")]),t._v(" "),r("li",[t._v("优先使用对象组合而不是继承。")])]),t._v(" "),r("h2",{attrs:{id:"设计模式的使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的使用"}},[t._v("#")]),t._v(" 设计模式的使用")]),t._v(" "),r("p",[t._v("设计模式在软件开发中的两个主要用途：")]),t._v(" "),r("ul",[r("li",[t._v("开发人员的共同平台：设计模式提供了一个标准的术语系统，且具体到特定的情景。例如，单例设计模式意味着使用单个对象，这样所有熟悉单例设计模式的开发人员都能使用单个对象，并且可以通过这种方式告诉对方，程序使用的是单例模式。")]),t._v(" "),r("li",[t._v("最佳的实践：设计模式已经经历了很长一段时间的发展，它们提供了软件开发过中面临的一般问题的最佳解决方案。学习这些模式有助于经验不足的开发人员通过一种简单快捷的方式来学习软件设计。")])]),t._v(" "),r("h2",{attrs:{id:"设计模式的分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的分类"}},[t._v("#")]),t._v(" 设计模式的分类")]),t._v(" "),r("h3",{attrs:{id:"设计模式的三大分类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式的三大分类"}},[t._v("#")]),t._v(" 设计模式的三大分类")]),t._v(" "),r("p",[t._v("根据设计模式的参考书中所提到，总共有"),r("code",[t._v("23")]),t._v("种设计模式。这些模式可以分为三大类：")]),t._v(" "),r("ul",[r("li",[t._v("创建型模式：对象实例化的模式，创建型模式用于解构对象的实例化过程。")]),t._v(" "),r("li",[t._v("结构型模式：把类和对象结合在一起形成一个更大的结构。")]),t._v(" "),r("li",[t._v("行为型模式：类和对象如何交互，及划分责任和算法。")])]),t._v(" "),r("p",[t._v("下图是整体描述设计模式之间的关系：")]),t._v(" "),r("p",[r("img",{attrs:{src:"https://raw.githubusercontent.com/yuhongjing/img-folder/master/img/20201113142558.png",alt:""}})]),t._v(" "),r("h2",{attrs:{id:"基础原则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基础原则"}},[t._v("#")]),t._v(" 基础原则")]),t._v(" "),r("ul",[r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/基础原则/solid.html"}},[t._v("SOLID五大设计原则")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/基础原则/迪米特法则.html"}},[t._v("迪米特法则")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/基础原则/合成复用原则.html"}},[t._v("合成复用原则")])],1)]),t._v(" "),r("h2",{attrs:{id:"创建型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[t._v("#")]),t._v(" 创建型模式")]),t._v(" "),r("ul",[r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/创建型模式/简单工厂模式/read.html"}},[t._v("简单工厂模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/创建型模式/工厂方法模式/read.html"}},[t._v("工厂方法模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/创建型模式/原型模式/read.html"}},[t._v("原型模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/创建型模式/建造者模式/read.html"}},[t._v("建造者模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/创建型模式/抽象工厂模式/read.html"}},[t._v("抽象工厂模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/创建型模式/单例模式/read.html"}},[t._v("单例模式")])],1)]),t._v(" "),r("h2",{attrs:{id:"行为型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式"}},[t._v("#")]),t._v(" 行为型模式")]),t._v(" "),r("ul",[r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/策略模式/read.html"}},[t._v("策略模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/模板方法模式/read.html"}},[t._v("模板方法模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/观察者模式/read.html"}},[t._v("观察者模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/状态模式/read.html"}},[t._v("状态模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/备忘录模式/read.html"}},[t._v("备忘录模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/迭代器模式/read.html"}},[t._v("迭代器模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/命令模式/read.html"}},[t._v("命令模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/职责链模式/read.html"}},[t._v("职责链模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/中介者模式/read.html"}},[t._v("中介者模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/解释器模式/read.html"}},[t._v("解释器模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/访问者模式/read.html"}},[t._v("访问者模式")])],1)]),t._v(" "),r("h2",{attrs:{id:"结构型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[t._v("#")]),t._v(" 结构型模式")]),t._v(" "),r("ul",[r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/结构型模式/装饰者模式/read.html"}},[t._v("装饰者模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/结构型模式/代理模式/read.html"}},[t._v("代理模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/结构型模式/外观模式/read.html"}},[t._v("外观模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/结构型模式/适配器模式/read.html"}},[t._v("适配器模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/结构型模式/组合模式/read.html"}},[t._v("组合模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/结构型模式/桥接模式/read.html"}},[t._v("桥接模式")])],1),t._v(" "),r("li",[r("RouterLink",{attrs:{to:"/knowledge/design/结构型模式/享元模式/read.html"}},[t._v("享元模式")])],1)]),t._v(" "),r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),r("h3",{attrs:{id:"java描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java描述"}},[t._v("#")]),t._v(" Java描述")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:""}},[t._v("大话设计模式")])]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.runoob.com/design-pattern/design-pattern-tutorial.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("菜鸟教程"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("深入浅出设计模式(Head First Design Patterns)")])]),t._v(" "),r("li",[r("a",{attrs:{href:""}},[t._v("Java Design Pattern")])])]),t._v(" "),r("h3",{attrs:{id:"c-描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#c-描述"}},[t._v("#")]),t._v(" C++描述")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://design-patterns.readthedocs.io/zh_CN/latest/creational_patterns/builder.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("图说设计模式"),r("OutboundLink")],1)])]),t._v(" "),r("h3",{attrs:{id:"php描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#php描述"}},[t._v("#")]),t._v(" PHP描述")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://hulin.gitbook.io/design-patterns-by-php/",target:"_blank",rel:"noopener noreferrer"}},[t._v("大话设计模式-PHP描述"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/kamranahmedse/design-patterns-for-humans",target:"_blank",rel:"noopener noreferrer"}},[t._v("design-patterns-for-humans"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://github.com/domnikl/DesignPatternsPHP",target:"_blank",rel:"noopener noreferrer"}},[t._v("DesignPatternsPHP"),r("OutboundLink")],1)])]),t._v(" "),r("h3",{attrs:{id:"javascript描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript描述"}},[t._v("#")]),t._v(" JavaScript描述")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://github.com/sohamkamani/javascript-design-patterns-for-humans#-builder",target:"_blank",rel:"noopener noreferrer"}},[t._v("javascript-design-patterns-for-humans"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=s.exports}}]);