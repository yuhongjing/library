(window.webpackJsonp=window.webpackJsonp||[]).push([[139],{509:function(v,_,t){"use strict";t.r(_);var a=t(28),r=Object(a.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"策略模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[v._v("#")]),v._v(" 策略模式")]),v._v(" "),t("p",[t("code",[v._v("策略模式")]),v._v("(Strategy)，又称"),t("code",[v._v("政策模式")]),v._v("(Policy)。")]),v._v(" "),t("p",[v._v("策略模式属于"),t("code",[v._v("对象行为型模式")]),v._v("。")]),v._v(" "),t("h2",{attrs:{id:"模式动机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模式动机"}},[v._v("#")]),v._v(" 模式动机")]),v._v(" "),t("ul",[t("li",[v._v("完成一项任务，往往可以有多种不同的方式，每一种方式称为一个策略，我们可以根据环境或者条件的不同选择不同的策略来完成该项任务。")]),v._v(" "),t("li",[v._v("在软件开发中也常常遇到类似的情况，实现某一个功能有多个途径，此时可以使用一种设计模式来使得系统可以灵活地选择解决途径，也能够方便地增加新的解决途径。")]),v._v(" "),t("li",[v._v("在软件系统中，有许多算法可以实现某一功能，如查找、排序等，一种常用的方法是硬编码(Hard Coding)在一个类中，如需要提供多种查找算法，可以将这些算法写到一个类中，在该类中提供多个方法，每一个方法对应一个具体的查找算法；当然也可以将这些查找算法封装在一个统一的方法中，通过if...else...等条件判断语句来进行选择。这两种实现方法我们都可以称之为硬编码，如果需要增加一种新的查找算法，需要修改封装算法类的源代码；更换查找算法，也需要修改客户端调用代码。在这个算法类中封装了大量查找算法，维护较为困难。")]),v._v(" "),t("li",[v._v("除了提供专门的查找算法类之外，还可以在客户端程序中直接包含算法代码，这种做法更不可取，将导致客户端程序庞大而且难以维护，如果存在大量可提供选择的算法时问题将变得更加严重。")]),v._v(" "),t("li",[v._v("为了解决这些问题，可以定义一些独立的类来封装不同的算法，每一个类封装一个具体的算法，在这里，每一个封装算法的类我们都可以称之为策略(Strategy)，为了保证这些策略的一致性，一般会用一个抽象的策略类来做算法的定义，而具体每种算法则对应于一个具体策略类。")])]),v._v(" "),t("h2",{attrs:{id:"模式定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模式定义"}},[v._v("#")]),v._v(" 模式定义")]),v._v(" "),t("p",[v._v("定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化。")]),v._v(" "),t("h2",{attrs:{id:"模式结构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模式结构"}},[v._v("#")]),v._v(" 模式结构")]),v._v(" "),t("p",[v._v("策略模式包含如下角色：")]),v._v(" "),t("ul",[t("li",[v._v("Context：环境类")]),v._v(" "),t("li",[v._v("Strategy：抽象策略类")]),v._v(" "),t("li",[v._v("ConcreteStrategy：具体策略类")])]),v._v(" "),t("h2",{attrs:{id:"代码实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[v._v("#")]),v._v(" 代码实现")]),v._v(" "),t("ul",[t("li",[t("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/策略模式/PHP实现.html"}},[v._v("PHP实现")])],1),v._v(" "),t("li",[t("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/策略模式/JS实现.html"}},[v._v("JS实现")])],1)]),v._v(" "),t("h2",{attrs:{id:"模式分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模式分析"}},[v._v("#")]),v._v(" 模式分析")]),v._v(" "),t("ul",[t("li",[v._v('策略模式是一个比较容易理解和使用的设计模式，策略模式是对算法的封装，它把算法的责任和算法本身分割开，委派给不同的对象管理。策略模式通常把一个系列的算法封装到一系列的策略类里面，作为一个抽象策略类的子类。用一句话来说，就是"准备一组算法，并将每一个算法封装起来，使得它们可以互换"。')]),v._v(" "),t("li",[v._v("在策略模式中，应当由客户端自己决定在什么情况下使用什么具体策略角色。")]),v._v(" "),t("li",[v._v('策略模式仅仅封装算法，提供新算法插入到已有系统中，以及老算法从系统中"退休"的方便，策略模式并不决定在何时使用何种算法，算法的选择由客户端来决定。这在一定程度上提高了系统的灵活性，但是客户端需要理解所有具体策略类之间的区别，以便选择合适的算法，这也是策略模式的缺点之一，在一定程度上增加了客户端的使用难度。')])]),v._v(" "),t("h2",{attrs:{id:"优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[v._v("#")]),v._v(" 优点")]),v._v(" "),t("p",[v._v("策略模式的优点")]),v._v(" "),t("ul",[t("li",[v._v('策略模式提供了对"开闭原则"的完美支持，用户可以在不修改原有系统的基础上选择算法或行为，也可以灵活地增加新的算法或行为。')]),v._v(" "),t("li",[v._v("策略模式提供了管理相关的算法族的办法。")]),v._v(" "),t("li",[v._v("策略模式提供了可以替换继承关系的办法。")]),v._v(" "),t("li",[v._v("使用策略模式可以避免使用多重条件转移语句。")])]),v._v(" "),t("h2",{attrs:{id:"缺点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[v._v("#")]),v._v(" 缺点")]),v._v(" "),t("p",[v._v("策略模式的缺点")]),v._v(" "),t("ul",[t("li",[v._v("客户端必须知道所有的策略类，并自行决定使用哪一个策略类。")]),v._v(" "),t("li",[v._v("策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。")])]),v._v(" "),t("h2",{attrs:{id:"适用环境"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#适用环境"}},[v._v("#")]),v._v(" 适用环境")]),v._v(" "),t("p",[v._v("在以下情况下可以使用策略模式：")]),v._v(" "),t("ul",[t("li",[v._v("如果在一个系统里面有许多类，它们之间的区别仅在于它们的行为，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。")]),v._v(" "),t("li",[v._v("一个系统需要动态地在几种算法中选择一种。")]),v._v(" "),t("li",[v._v("如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。")]),v._v(" "),t("li",[v._v("不希望客户端知道复杂的、与算法相关的数据结构，在具体策略类中封装算法和相关的数据结构，提高算法的保密性与安全性。")])]),v._v(" "),t("h2",{attrs:{id:"模式扩展"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模式扩展"}},[v._v("#")]),v._v(" 模式扩展")]),v._v(" "),t("p",[v._v("策略模式与状态模式")]),v._v(" "),t("ul",[t("li",[v._v("可以通过环境类状态的个数来决定是使用策略模式还是状态模式。")]),v._v(" "),t("li",[v._v("策略模式的环境类自己选择一个具体策略类，具体策略类无须关心环境类；而状态模式的环境类由于外在因素需要放进一个具体状态中，以便通过其方法实现状态的切换，因此环境类和状态类之间存在一种双向的关联关系。")]),v._v(" "),t("li",[v._v("使用策略模式时，客户端需要知道所选的具体策略是哪一个，而使用状态模式时，客户端无须关心具体状态，环境类的状态会根据用户的操作自动转换。")]),v._v(" "),t("li",[v._v("如果系统中的某个类的对象存在多种状态，不同状态下行为有差异，而且这些状态之间可以发生转换时使用状态模式；如果系统中某个类的某一行为存在多种实现方式，而且这些实现方式可以互换时使用策略模式。")])])])}),[],!1,null,null,null);_.default=r.exports}}]);