(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{516:function(t,v,_){"use strict";_.r(v);var a=_(28),r=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"解释器模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#解释器模式"}},[t._v("#")]),t._v(" 解释器模式")]),t._v(" "),_("p",[_("code",[t._v("解释器模式")]),t._v("(Interpreter Pattern)属于对象行为型模式。")]),t._v(" "),_("h2",{attrs:{id:"模式动机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模式动机"}},[t._v("#")]),t._v(" 模式动机")]),t._v(" "),_("p",[t._v("在某些情况下，为了更好地描述某一些特定类型的问题，我们可以创建一种新的语言，这种语言拥有自己的表达式和结构，即文法规则，这些问题的实例将对应为该语言中的句子。此时，可以使用解释器模式来设计这种新的语言。对解释器模式的学习能够加深我们对面向对象思想的理解，并且掌握编程语言中文法规则的解释过程。这就是解释器模式的动机。")]),t._v(" "),_("h2",{attrs:{id:"模式定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模式定义"}},[t._v("#")]),t._v(" 模式定义")]),t._v(" "),_("p",[t._v('定义一个语言的文法，并且建立一个解释器来解释该语言中的句子，这里"语言"是指使用规定格式和语法的代码。')]),t._v(" "),_("h2",{attrs:{id:"模式结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模式结构"}},[t._v("#")]),t._v(" 模式结构")]),t._v(" "),_("p",[t._v("解释器模式包含如下角色：")]),t._v(" "),_("ul",[_("li",[t._v("AbstractExpression：抽象表达式")]),t._v(" "),_("li",[t._v("TerminalExpression：终结符表达式")]),t._v(" "),_("li",[t._v("NonterminalExpression：非终结符表达式")]),t._v(" "),_("li",[t._v("Context：环境类")])]),t._v(" "),_("h2",{attrs:{id:"代码实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),_("ul",[_("li",[_("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/解释器模式/PHP实现.html"}},[t._v("PHP实现")])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/解释器模式/JS实现.html"}},[t._v("JS实现")])],1)]),t._v(" "),_("h2",{attrs:{id:"模式分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模式分析"}},[t._v("#")]),t._v(" 模式分析")]),t._v(" "),_("ul",[_("li",[t._v("由于表达式可分为终结符表达式和非终结符表达式，因此解释器模式的结构与组合模式的结构有些类似，但在解释器模式中包含更多的组成元素。")]),t._v(" "),_("li",[t._v("解释器模式为自定义语言的设计和实现提供了一种解决方案，它用于定义一组文法规则并通过这组文法规则来解释语言中的句子。")])]),t._v(" "),_("h2",{attrs:{id:"优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),_("p",[t._v("解释器模式的优点：")]),t._v(" "),_("ul",[_("li",[t._v("易于改变和扩展文法。由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法。")]),t._v(" "),_("li",[t._v("每一条文法规则都可以表示为一个类，因此可以方便地实现一个简单的语言。")]),t._v(" "),_("li",[t._v("实现文法较为容易。在抽象语法树中每一个表达式节点类的实现方式都是相似的，这些类的代码编写都不会特别复杂，还可以通过一些工具自动生成节点类代码。")]),t._v(" "),_("li",[t._v("增加新的解释表达式较为方便。如果用户需要增加新的解释表达式只需要对应增加一个新的终结符表达式或非终结符表达式，原有表达式类代码无须修改，符合『开闭原则』。")])]),t._v(" "),_("h2",{attrs:{id:"缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),_("p",[t._v("解释器模式的缺点：")]),t._v(" "),_("ul",[_("li",[t._v("对于复杂文法难以维护。在解释器模式中，每一条规则至少需要定义一个类，因此如果一个语言包含太多文法规则，类的个数将会急剧增加，导致系统难以管理和维护，此时可以考虑使用语法分析程序等方式来取代解释器模式。")]),t._v(" "),_("li",[t._v("执行效率较低。由于在解释器模式中使用了大量的循环和递归调用，因此在解释较为复杂的句子时其速度很慢，而且代码的调试过程也比较麻烦。")])]),t._v(" "),_("h2",{attrs:{id:"适用环境"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#适用环境"}},[t._v("#")]),t._v(" 适用环境")]),t._v(" "),_("p",[t._v("在以下情况下可以使用解释器模式：")]),t._v(" "),_("ul",[_("li",[t._v("可以将一个需要解释执行的语言中的句子表示一个抽象语法树。")]),t._v(" "),_("li",[t._v("一些重复出现的问题可以用一种简单的语言来进行表达。")]),t._v(" "),_("li",[t._v("一个语言的文法较为简单。")]),t._v(" "),_("li",[t._v("执行效率不是关键问题。")])])])}),[],!1,null,null,null);v.default=r.exports}}]);