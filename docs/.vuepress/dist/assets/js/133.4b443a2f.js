(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{504:function(t,v,_){"use strict";_.r(v);var a=_(28),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"模板模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模板模式"}},[t._v("#")]),t._v(" 模板模式")]),t._v(" "),_("p",[_("code",[t._v("模板模式")]),t._v("(Template Pattern)，又称为模板方法模式。")]),t._v(" "),_("p",[t._v("模板模式属于"),_("code",[t._v("对象行为型模式")]),t._v("。")]),t._v(" "),_("h2",{attrs:{id:"模式动机"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模式动机"}},[t._v("#")]),t._v(" 模式动机")]),t._v(" "),_("p",[t._v("在软件开发中，有时也会遇到类似的情况，某个方法的实现需要多个步骤，其中有些步骤是固定的，而有些步骤并不固定，存在可变性。")]),t._v(" "),_("p",[t._v("为了提高代码的复用性和系统的灵活性，在模板方法模式中，将实现功能的每一个步骤所对应的方法称为基本方法，而调用这些基本方法同时定义基本方法的执行次序的方法称为模板方法。")]),t._v(" "),_("h2",{attrs:{id:"模式定义"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模式定义"}},[t._v("#")]),t._v(" 模式定义")]),t._v(" "),_("p",[t._v("定义一个操作中算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。")]),t._v(" "),_("h2",{attrs:{id:"模式结构"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模式结构"}},[t._v("#")]),t._v(" 模式结构")]),t._v(" "),_("p",[t._v("模板模式包含如下角色：")]),t._v(" "),_("ul",[_("li",[t._v("AbstractClass：抽象类")]),t._v(" "),_("li",[t._v("ConcreteClass：具体子类")])]),t._v(" "),_("h2",{attrs:{id:"代码实现"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#代码实现"}},[t._v("#")]),t._v(" 代码实现")]),t._v(" "),_("ul",[_("li",[_("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/模板模式/PHP实现.html"}},[t._v("PHP实现")])],1),t._v(" "),_("li",[_("RouterLink",{attrs:{to:"/knowledge/design/行为型模式/模板模式/JS实现.html"}},[t._v("JS实现")])],1)]),t._v(" "),_("h2",{attrs:{id:"模式分析"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模式分析"}},[t._v("#")]),t._v(" 模式分析")]),t._v(" "),_("ul",[_("li",[t._v("模板模式是结构最简单的行为型设计模式，在其结构中只存在父类与子类之间的继承关系。通过使用模板方法模式，可以将一些复杂流程的实现步骤封装在一系列基本方法中，在抽象父类中提供一个称之为模板方法的方法来定义这些基本方法的执行次序，而通过其子类来覆盖某些步骤，从而使得相同的算法框架可以有不同的执行结果。模板方法模式提供了一个模板方法来定义算法框架，而某些具体步骤的实现可以在其子类中完成。")]),t._v(" "),_("li",[t._v("模板模式是基于继承的代码复用技术，它体现了面向对象的诸多重要思想，是一种使用较为频繁的模式。模板方法模式广泛应用于框架设计中，以确保通过父类来控制处理流程的逻辑顺序（如框架的初始化，测试流程的设置等）。")])]),t._v(" "),_("h2",{attrs:{id:"优点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),_("p",[t._v("模板模式的优点")]),t._v(" "),_("ul",[_("li",[t._v("在父类中形式化地定义一个算法，而由它的子类来实现细节的处理，在子类实现详细的处理算法时并不会改变算法中步骤的执行次序。")]),t._v(" "),_("li",[t._v("模板方法模式是一种代码复用技术，它在类库设计中尤为重要，它提取了类库中的公共行为，将公共行为放在父类中，而通过其子类来实现不同的行为，它鼓励我们恰当使用继承来实现代码的复用。")]),t._v(" "),_("li",[t._v("可实现一种反向控制结构，通过子类覆盖父类的钩子方法来决定某一特定步骤是否需要执行。")]),t._v(" "),_("li",[t._v("在模板方法模式中可以通过子类来覆盖父类的基本方法，不同的子类可以提供基本方法的不同实现，更新和增加新的子类很方便，符合单一职责原则和开闭原则。")])]),t._v(" "),_("h2",{attrs:{id:"缺点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),_("p",[t._v("模板模式的缺点")]),t._v(" "),_("ul",[_("li",[t._v("需要为每一个基本方法的不同实现提供一个子类，如果父类中可变的基本方法太多，将会导致类的个数增加，系统更加庞大，设计也更加抽象，此时，可结合桥接模式来进行设计。")])]),t._v(" "),_("h2",{attrs:{id:"适用环境"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#适用环境"}},[t._v("#")]),t._v(" 适用环境")]),t._v(" "),_("p",[t._v("在以下情况下可以使用模板模式：")]),t._v(" "),_("ul",[_("li",[t._v("对一些复杂的算法进行分割，将其算法中固定不变的部分设计为模板方法和父类具体方法，而一些可以改变的细节由其子类来实现。即：一次性实现一个算法的不变部分，并将可变的行为留给子类来实现。")]),t._v(" "),_("li",[t._v("各子类中公共的行为应该被提取出来并集中到一个公共父类中以避免代码重复。")]),t._v(" "),_("li",[t._v("需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。")])]),t._v(" "),_("h2",{attrs:{id:"模式扩展"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模式扩展"}},[t._v("#")]),t._v(" 模式扩展")]),t._v(" "),_("h3",{attrs:{id:"模板模式与策略模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#模板模式与策略模式"}},[t._v("#")]),t._v(" 模板模式与策略模式")]),t._v(" "),_("ul",[_("li",[t._v('模板方法的意图：定义一个算法流程，将一些特定步骤的具体实现、延迟到子类。使得可以在不改变算法流程的情况下，通过不同的子类、来实现"定制"流程中的特定的步骤。')]),t._v(" "),_("li",[t._v("策略模式的意图：使不同的算法可以被相互替换，而不影响客户端的使用。")])]),t._v(" "),_("p",[t._v("在意图上看，模板方法更加强调：")]),t._v(" "),_("ul",[_("li",[t._v("定义一条线（算法流程），线上的多个点是可以变化的（具体实现在子类中完成），线上的多个点一定是会被执行的，并且一定是按照特定流程被执行的。")]),t._v(" "),_("li",[t._v("算法流程只有唯一的入口，对于点的访问是受限的（通常用受保护的虚函数来定义可变点）。")])]),t._v(" "),_("p",[t._v('策略模式更注重于：一个"策略"是一个整体的（完整的）算法，算法是可以被整体替换的。而模板方法只能被替换其中的特定点，算法流程是固定不可变的。')]),t._v(" "),_("p",[t._v("在这样的细节上看来，模板方法和一组策略模式是不可以划等号的。")])])}),[],!1,null,null,null);v.default=s.exports}}]);