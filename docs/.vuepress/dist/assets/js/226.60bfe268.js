(window.webpackJsonp=window.webpackJsonp||[]).push([[226],{586:function(t,e,v){"use strict";v.r(e);var a=v(27),_=Object(a.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"长连接和短连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#长连接和短连接"}},[t._v("#")]),t._v(" 长连接和短连接")]),t._v(" "),v("h2",{attrs:{id:"短连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#短连接"}},[t._v("#")]),t._v(" 短连接")]),t._v(" "),v("ul",[v("li",[t._v("HTTP/1.0中默认使用短连接，也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。")]),t._v(" "),v("li",[t._v("当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如Javascript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。「")]),t._v(" "),v("li",[t._v("短连接的操作步骤是：建立连接——数据传输——关闭连接。....循环。")]),t._v(" "),v("li",[t._v("在HTTP/1.0时代，WEB网站的http服务一般都用短连接，并发量大。但每个用户需频繁操作的情况下需用长连接。")])]),t._v(" "),v("h2",{attrs:{id:"长连接"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#长连接"}},[t._v("#")]),t._v(" 长连接")]),t._v(" "),v("ul",[v("li",[t._v("从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码"),v("code",[t._v("Connection: keep-alive")]),t._v("。")]),t._v(" "),v("li",[t._v("在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。")]),t._v(" "),v("li",[t._v("keep-alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。")]),t._v(" "),v("li",[t._v("长连接的操作步骤是：建立连接——数据传输...保持连接...数据传输——关闭连接。")]),t._v(" "),v("li",[t._v("长连接多用于操作频繁，点对点通讯，而且连接数不能太多的情况。")])]),t._v(" "),v("h2",{attrs:{id:"长短轮询与长短连接的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#长短轮询与长短连接的区别"}},[t._v("#")]),t._v(" 长短轮询与长短连接的区别")]),t._v(" "),v("ul",[v("li",[t._v("HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。")]),t._v(" "),v("li",[t._v("长短连接通过双方请求响应头是否设置"),v("code",[t._v("Connection: keep-alive")]),t._v("来决定使用，而是否轮询是根据服务端的处理方式来决定的，与客户端没有关系。")]),t._v(" "),v("li",[t._v("实现方式不同，长短连接通过协议实现，而长短轮询通过服务器变成手动实现。")])])])}),[],!1,null,null,null);e.default=_.exports}}]);